{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","color","width","height","brushRadius","lazyRadius","savedPictureList","handleSavePicture","data","JSON","parse","_this","saveableCanvas","getSaveData","console","log","lines","length","concat","Object","toConsumableArray","setState","_this2","this","window","setInterval","Math","floor","random","toString","_this3","react_default","a","createElement","className","es","style","background","zIndex","borderRadius","hideGrid","ref","canvasDraw","brushColor","canvasWidth","canvasHeight","es_button","onClick","clear","undo","map","savedPicture","disabled","loadableCanvas","saveData","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAkFeA,0NA5EbC,MAAQ,CACNC,MAAO,UACPC,MAAO,IACPC,OAAQ,IACRC,YAAa,EACbC,WAAY,EACZC,iBAAiB,MAUnBC,kBAAkB,WAChB,IAAMC,EAAMC,KAAKC,MAAMC,EAAKC,eAAeC,eAE3C,GADAC,QAAQC,IAAI,oCAAqCP,EAAKQ,OACnDR,EAAKQ,MAAMC,OAAO,EAAE,CACrB,IAAMX,EAAgB,GAAAY,OAAAC,OAAAC,EAAA,EAAAD,CAAMR,EAAKX,MAAMM,kBAAjB,CAAkCK,EAAKC,eAAeC,gBAC5EF,EAAKU,SAAS,CACZf,0GAdc,IAAAgB,EAAAC,KAElBC,OAAOC,YAAY,WACjBH,EAAKD,SAAS,CACZpB,MAAO,IAAMyB,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,OAE5D,uCAaI,IAAAC,EAAAP,KACAjB,EAAkBiB,KAAKvB,MAAvBM,iBACP,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,mBAGFH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,MAAO,CAACC,WAAY,YAAaC,OAAO,KAAKC,aAAa,QAC1DC,UAAQ,EACRC,IAAK,SAAAC,GAAU,OAAKZ,EAAKlB,eAAiB8B,GAC1CC,WAAYpB,KAAKvB,MAAMC,MACvBG,YAAamB,KAAKvB,MAAMI,YACxBC,WAAYkB,KAAKvB,MAAMK,WACvBuC,YAAarB,KAAKvB,MAAME,MACxB2C,aAActB,KAAKvB,MAAMG,SAEzB4B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAASxB,KAAKhB,mBAAtB,WACAwB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAS,WAAOjB,EAAKlB,eAAeoC,UAA5C,SAGAjB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQC,QAAS,WAAOjB,EAAKlB,eAAeqC,SAA5C,UAMA3C,EAAiBW,OAAO,EACxBX,EAAiB4C,IAAI,SAACC,GAAD,OACtBpB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACCC,MAAO,CAACC,WAAY,WACpBe,UAAQ,EACRZ,UAAQ,EACRI,YAAad,EAAK9B,MAAME,MACxB2C,aAAcf,EAAK9B,MAAMG,OACzBsC,IAAK,SAAAC,GAAU,OAAKZ,EAAKuB,eAAiBX,GAC1CY,SAAUH,MAEX,aApESI,cCOEC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f293352.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport { Button } from 'antd';\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'; \r\nclass App extends Component {\r\n  state = {\r\n    color: \"#ffc600\",\r\n    width: 320,\r\n    height: 320,\r\n    brushRadius: 3,\r\n    lazyRadius: 3,\r\n    savedPictureList:[],\r\n  };\r\n  componentDidMount() {\r\n    // let's change the color randomly every 2 seconds. fun!\r\n    window.setInterval(() => {\r\n      this.setState({\r\n        color: \"#\" + Math.floor(Math.random() * 16777215).toString(16)\r\n      });\r\n    }, 1500);\r\n  }\r\n  handleSavePicture=()=>{\r\n    const data =JSON.parse(this.saveableCanvas.getSaveData())\r\n    console.log('this.saveableCanvas.getSaveData()', data.lines)\r\n    if(data.lines.length>0){\r\n      const savedPictureList= [...this.state.savedPictureList,this.saveableCanvas.getSaveData() ]\r\n      this.setState({\r\n        savedPictureList\r\n      })\r\n    }\r\n  \r\n  }\r\n  render() {\r\n    const {savedPictureList}=this.state\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"canvas-drower\">\r\n          <div className=\"label\">\r\n            Eao toilet Wall\r\n          </div>\r\n        <CanvasDraw\r\n          style={{background: \"#6b6b6b47\" ,zIndex:\"25\",borderRadius:'14px'}}\r\n          hideGrid\r\n          ref={canvasDraw => (this.saveableCanvas = canvasDraw)}\r\n          brushColor={this.state.color}\r\n          brushRadius={this.state.brushRadius}\r\n          lazyRadius={this.state.lazyRadius}\r\n          canvasWidth={this.state.width}\r\n          canvasHeight={this.state.height}\r\n        />\r\n          <div>\r\n          <Button onClick={this.handleSavePicture} > Save  </Button>\r\n          <Button onClick={() => {this.saveableCanvas.clear()}} >\r\n            Clear\r\n          </Button>\r\n          <Button onClick={() => {this.saveableCanvas.undo()}}  >\r\n            Undo\r\n          </Button>\r\n        </div>\r\n        </div>\r\n\r\n        { savedPictureList.length>0?\r\n          savedPictureList.map((savedPicture)=>\r\n         <CanvasDraw\r\n          style={{background: \"#282c34\"}}\r\n          disabled\r\n          hideGrid \r\n          canvasWidth={this.state.width}\r\n          canvasHeight={this.state.height}\r\n          ref={canvasDraw => (this.loadableCanvas = canvasDraw)}\r\n          saveData={savedPicture}\r\n        />)\r\n        :null\r\n      }\r\n      \r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}